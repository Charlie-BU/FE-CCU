{"version":3,"file":"utils.js","sources":["utils/js/utils.js"],"sourcesContent":["import { uniRequest } from \"@/utils/js/api.js\";\n\nexport function get_rank(users, currentUserId) {\n\tlet ids = [];\n\tlet flagIndex = 0;\n\tlet my_rank = \"—\";\n\n\tfor (let i = 0; i < users.length; i++) {\n\t\tif (i === 0) {\n\t\t\tids.push(i + 1);\n\t\t} else {\n\t\t\tif (users[i].score === users[flagIndex].score) {\n\t\t\t\tids.push(flagIndex + 1);\n\t\t\t} else {\n\t\t\t\tflagIndex = i;\n\t\t\t\tids.push(i + 1);\n\t\t\t}\n\t\t}\n\t\t// 检查当前用户的排名\n\t\tif (users[i].id === currentUserId) {\n\t\t\tmy_rank = ids[ids.length - 1];\n\t\t}\n\t}\n\treturn [ids, my_rank];\n}\n\nexport function get_my_rank(currentUserId) {\n\tvar my_rank = null;\n\tuniRequest(\"POST\", \"get_users\", null, \"user\", (res) => {\n\t\tmy_rank = get_rank(res.data.users, currentUserId)[1];\n\t\tuni.setStorageSync(\"my_rank\", my_rank);\n\t});\n}\n\nexport function decodeBase64(encodedString) {\n\tconst chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\tlet str = String(encodedString).replace(/=+$/, \"\");\n\tif (str.length % 4 === 1) {\n\t\tthrow new Error(\"'decodeBase64' failed: The string to be decoded is not correctly encoded.\");\n\t}\n\tlet output = \"\";\n\tfor (\n\t\tlet bc = 0, bs, buffer, idx = 0;\n\t\t(buffer = str.charAt(idx++));\n\t\t~buffer && ((bs = bc % 4 ? bs * 64 + buffer : buffer), bc++ % 4) ? (output += String.fromCharCode(255 & (bs >> ((-2 * bc) & 6)))) : 0\n\t) {\n\t\tbuffer = chars.indexOf(buffer);\n\t}\n\treturn output;\n}\n\nexport function decode(encodedString) {\n\tlet byteString = decodeBase64(encodedString);\n\tlet decodedString = decodeURIComponent(escape(byteString));\n\treturn decodedString;\n}\n\nexport function token_operation(user_token) {\n\t// 从user_token中拿到user_id和timestamp\n\tconst decoded_user_token = decode(user_token);\n\tconst regex = /(.*?)=(.*)=([\\d.]+)$/;\n\tconst match = decoded_user_token.match(regex);\n\tconst user_id = match ? match[1] : null;\n\tconst token_check = match ? match[2] : null;\n\tconst timestamp = +(match ? match[3] : null);\n\t// 设置token过期时间\n\tconst login_time = new Date(timestamp * 1000);\n\tconst valid_time_end = new Date(login_time.getTime() + 24 * 60 * 60 * 1000);\n\tconst now = new Date();\n\tif (!match || token_check !== \"logined_user_id[ATTENTION]timestamp\") {\n\t\tconsole.log(\"用户token无效\");\n\t\twx.clearStorageSync();\n\t\treturn null;\n\t}\n\tif (now > valid_time_end) {\n\t\tconsole.log(\"登录过期\");\n\t\twx.clearStorageSync();\n\t\treturn null;\n\t}\n\treturn user_id;\n}\n\nexport function get_user_info(user_token) {\n\tconst user_id = token_operation(user_token);\n\tif (!user_id) {\n\t\treturn [null, null];\n\t}\n\tuniRequest(\"POST\", \"get_this_user\", { user_id: user_id }, \"user\", (res) => {\n\t\tuni.setStorageSync(\"user\", res.data.user);\n\t});\n\t// 计算活跃度\n\tuniRequest(\"POST\", \"cal_active\", { user_id: user_id }, \"user\");\n\treturn [+user_id, uni.getStorageSync(\"user\")];\n}\n\nexport function format_time(datetime) {\n\tconst date = new Date(datetime);\n\tif (isNaN(date.getTime())) {\n\t\tconsole.log(\"Invalid datetime:\", datetime);\n\t\treturn null;\n\t}\n\tconst year = date.getFullYear().toString();\n\tconst month = (date.getMonth() + 1).toString().padStart(2, \"0\");\n\tconst day = date.getDate().toString().padStart(2, \"0\");\n\tconst hours = date.getHours().toString().padStart(2, \"0\");\n\tconst minutes = date.getMinutes().toString().padStart(2, \"0\");\n\tconst seconds = date.getSeconds().toString().padStart(2, \"0\");\n\treturn `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;\n}\n\nexport const toPercentage = (num, decimals = 2) => (num * 100).toFixed(decimals) + \"%\";\n\nexport function subscirbe_message(template_Ids, callback = null) {\n\t//template_Ids为列表，对应的消息模板\n\twx.requestSubscribeMessage({\n\t\ttmplIds: template_Ids,\n\t\tsuccess(res) {\n\t\t\t//用户授权后，无论同意与否\n\t\t\tif (res.errMsg == \"requestSubscribeMessage:ok\") {\n\t\t\t\tcallback();\n\t\t\t}\n\t\t},\n\t\tfail(e) {\n\t\t\tconsole.log(e);\n\t\t}\n\t});\n}\n\nexport const previewImage = (URLs) => {\n\tif (typeof URLs === \"string\") {\n\t\tuni.previewImage({\n\t\t\turls: [URLs],\n\t\t\tcurrent: URLs\n\t\t});\n\t} else if (Array.isArray(URLs)) {\n\t\tuni.previewImage({\n\t\t\turls: URLs,\n\t\t\tcurrent: URLs[0] || \"\"\n\t\t});\n\t}\n};\n"],"names":["uni"],"mappings":";;AA+FO,SAAS,YAAY,UAAU;AACrC,QAAM,OAAO,IAAI,KAAK,QAAQ;AAC9B,MAAI,MAAM,KAAK,QAAO,CAAE,GAAG;AAC1BA,kBAAA,MAAA,MAAA,OAAA,2BAAY,qBAAqB,QAAQ;AACzC,WAAO;AAAA,EACP;AACD,QAAM,OAAO,KAAK,YAAa,EAAC,SAAQ;AACxC,QAAM,SAAS,KAAK,aAAa,GAAG,SAAQ,EAAG,SAAS,GAAG,GAAG;AAC9D,QAAM,MAAM,KAAK,QAAS,EAAC,SAAQ,EAAG,SAAS,GAAG,GAAG;AACrD,QAAM,QAAQ,KAAK,SAAU,EAAC,SAAQ,EAAG,SAAS,GAAG,GAAG;AACxD,QAAM,UAAU,KAAK,WAAY,EAAC,SAAQ,EAAG,SAAS,GAAG,GAAG;AAC5D,QAAM,UAAU,KAAK,WAAY,EAAC,SAAQ,EAAG,SAAS,GAAG,GAAG;AAC5D,SAAO,GAAG,IAAI,IAAI,KAAK,IAAI,GAAG,IAAI,KAAK,IAAI,OAAO,IAAI,OAAO;AAC9D;AAoBY,MAAC,eAAe,CAAC,SAAS;AACrC,MAAI,OAAO,SAAS,UAAU;AAC7BA,kBAAAA,MAAI,aAAa;AAAA,MAChB,MAAM,CAAC,IAAI;AAAA,MACX,SAAS;AAAA,IACZ,CAAG;AAAA,EACD,WAAU,MAAM,QAAQ,IAAI,GAAG;AAC/BA,kBAAAA,MAAI,aAAa;AAAA,MAChB,MAAM;AAAA,MACN,SAAS,KAAK,CAAC,KAAK;AAAA,IACvB,CAAG;AAAA,EACD;AACF;;;"}